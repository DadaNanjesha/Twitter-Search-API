Index: .gitignore
===================================================================
--- .gitignore	(date 1614373776000)
+++ .gitignore	(date 1614373776000)
@@ -0,0 +1,126 @@
+# Created by .ignore support plugin (hsz.mobi)
+### Python template
+# Byte-compiled / optimized / DLL files
+__pycache__/
+*.py[cod]
+*$py.class
+
+# C extensions
+*.so
+
+# Distribution / packaging
+.Python
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+wheels/
+pip-wheel-metadata/
+share/python-wheels/
+*.egg-info/
+.installed.cfg
+*.egg
+MANIFEST
+
+# PyInstaller
+#  Usually these files are written by a python script from a template
+#  before PyInstaller builds the exe, so as to inject date/other infos into it.
+*.manifest
+*.spec
+
+# Installer logs
+pip-log.txt
+pip-delete-this-directory.txt
+
+# Unit test / coverage reports
+htmlcov/
+.tox/
+.nox/
+.coverage
+.coverage.*
+.cache
+nosetests.xml
+coverage.xml
+*.cover
+.hypothesis/
+.pytest_cache/
+
+# Translations
+*.mo
+*.pot
+
+# Django stuff:
+*.log
+local_settings.py
+db.sqlite3
+
+# Flask stuff:
+instance/
+.webassets-cache
+
+# Scrapy stuff:
+.scrapy
+
+# Sphinx documentation
+docs/_build/
+
+# PyBuilder
+target/
+
+# Jupyter Notebook
+.ipynb_checkpoints
+
+# IPython
+profile_default/
+ipython_config.py
+
+# pyenv
+.python-version
+
+# pipenv
+#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
+#   However, in case of collaboration, if having platform-specific dependencies or dependencies
+#   having no cross-platform support, pipenv may install dependencies that don't work, or not
+#   install all needed dependencies.
+#Pipfile.lock
+
+# celery beat schedule file
+celerybeat-schedule
+
+# SageMath parsed files
+*.sage.py
+
+# Environments
+.env
+.venv
+env/
+venv/
+ENV/
+env.bak/
+venv.bak/
+
+# Spyder project settings
+.spyderproject
+.spyproject
+
+# Rope project settings
+.ropeproject
+
+# mkdocs documentation
+/site
+
+# mypy
+.mypy_cache/
+.dmypy.json
+dmypy.json
+
+# Pyre type checker
+.pyre/
+
Index: README.md
===================================================================
--- README.md	(date 1614373776000)
+++ README.md	(date 1614373776000)
@@ -0,0 +1,29 @@
+# **Twitter Search API**
+
+A minimum viable product written in Python using Django and the Django REST Framework
+with a sqlite database.
+
+**All below problem Statement are covered:**
+
+1. API 1 to trigger a twitter search for recent high traffic events. (e.g. #ElectionDay,#Elections2020, #TRUMP2020Landslide, #BidenHarris2020 etc were high traffic
+   hashtags during the US Presidential elections 2020).
+   `http://127.0.0.1:8000/search/?query=TRUMP2020Landslide`
+
+2. API 2 to return stored tweets and their metadata based on applied filters/search.
+  ` http://127.0.0.1:8000/twitterSearch/`
+  `http://127.0.0.1:8000/admin/search/twitterdata/`
+
+3. API 3 (For Bonus Points) to export filtered data as CSV with selected columns of your
+   choice (whichever columns make more sense to have in csv for lets say someone who
+   wants to perform some analysis on it).
+   `http://127.0.0.1:8000/admin/search/twitterdata/`
+   
+
+Links are provided to run the API operations.
+
+For any other information please contact : **dadananjesha.rymec@gmail.com**
+
+
+
+
+
Index: TwitterSearch/__init__.py
===================================================================
--- TwitterSearch/__init__.py	(date 1614373776000)
+++ TwitterSearch/__init__.py	(date 1614373776000)
@@ -0,0 +1,0 @@
Index: TwitterSearch/asgi.py
===================================================================
--- TwitterSearch/asgi.py	(date 1614373776000)
+++ TwitterSearch/asgi.py	(date 1614373776000)
@@ -0,0 +1,16 @@
+"""
+ASGI config for TwitterSearch project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TwitterSearch.settings')
+
+application = get_asgi_application()
Index: TwitterSearch/settings.py
===================================================================
--- TwitterSearch/settings.py	(date 1614373776000)
+++ TwitterSearch/settings.py	(date 1614373776000)
@@ -0,0 +1,116 @@
+"""
+# Author : Dada Nanjesha GS (dadananjesha@rymec.com)
+# Year : 2021
+# Copyright: Dada Nanjesha GS
+
+Django settings for TwitterSearch project.
+Generated by 'django-admin startproject' using Django 3.1.7.
+For more information on this file, see
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'nw=)zspl1=e78s8)#$bxv7tt^+_lkrx70)6q)te3#=p7)mymp6'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'import_export',
+    'search'
+]
+
+IMPORT_EXPORT_USE_TRANSACTIONS = True
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'TwitterSearch.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'TwitterSearch.wsgi.application'
+
+# Database
+# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+# Password validation
+# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+# Internationalization
+# https://docs.djangoproject.com/en/3.1/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/3.1/howto/static-files/
+
+STATIC_URL = '/static/'
Index: TwitterSearch/urls.py
===================================================================
--- TwitterSearch/urls.py	(date 1614373776000)
+++ TwitterSearch/urls.py	(date 1614373776000)
@@ -0,0 +1,24 @@
+"""TwitterSearch URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/3.1/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+from search import views
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('search/', views.search_tweet, name='search_tweet'),
+    path('twitterSearch/', views.TwitterSearchList.as_view(), name='TwitterSearchList'),
+]
Index: TwitterSearch/wsgi.py
===================================================================
--- TwitterSearch/wsgi.py	(date 1614373776000)
+++ TwitterSearch/wsgi.py	(date 1614373776000)
@@ -0,0 +1,16 @@
+"""
+WSGI config for TwitterSearch project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TwitterSearch.settings')
+
+application = get_wsgi_application()
Index: manage.py
===================================================================
--- manage.py	(date 1614373776000)
+++ manage.py	(date 1614373776000)
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TwitterSearch.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
Index: requirements.txt
===================================================================
--- requirements.txt	(date 1614373776000)
+++ requirements.txt	(date 1614373776000)
@@ -0,0 +1,27 @@
+asgiref==3.3.1
+certifi==2020.12.5
+chardet==4.0.0
+defusedxml==0.6.0
+diff-match-patch==20200713
+Django==3.1.7
+django-import-export==2.5.0
+djangorestframework==3.12.2
+et-xmlfile==1.0.1
+future==0.18.2
+idna==2.10
+jdcal==1.4.1
+MarkupPy==1.14
+oauthlib==3.1.0
+odfpy==1.4.1
+openpyxl==3.0.6
+python-twitter==3.5
+pytz==2021.1
+PyYAML==5.4.1
+requests==2.25.1
+requests-oauthlib==1.3.0
+sqlparse==0.4.1
+tablib==3.0.0
+twitter==1.18.0
+urllib3==1.26.3
+xlrd==2.0.1
+xlwt==1.3.0
Index: search/__init__.py
===================================================================
--- search/__init__.py	(date 1614373776000)
+++ search/__init__.py	(date 1614373776000)
@@ -0,0 +1,0 @@
Index: search/admin.py
===================================================================
--- search/admin.py	(date 1614373776000)
+++ search/admin.py	(date 1614373776000)
@@ -0,0 +1,17 @@
+# Author : Dada Nanjesha GS (dadananjesha@rymec.com)
+# Year : 2021
+# Copyright: Dada Nanjesha GS
+
+from django.contrib import admin
+from search.models import TwitterData
+from import_export.admin import ImportExportModelAdmin
+
+
+class TwitterDataAdmin(ImportExportModelAdmin, admin.ModelAdmin):
+    list_display = ("id", "user", "url", "created_at")
+    list_per_page = 10
+    search_fields = ("id", "user")
+    list_display_links = ("id", "user")
+
+
+admin.site.register(TwitterData, TwitterDataAdmin)
Index: search/apps.py
===================================================================
--- search/apps.py	(date 1614373776000)
+++ search/apps.py	(date 1614373776000)
@@ -0,0 +1,9 @@
+# Author : Dada Nanjesha GS (dadananjesha@rymec.com)
+# Year : 2021
+# Copyright: Dada Nanjesha GS
+
+from django.apps import AppConfig
+
+
+class SearchConfig(AppConfig):
+    name = 'search'
Index: search/migrations/0001_initial.py
===================================================================
--- search/migrations/0001_initial.py	(date 1614373776000)
+++ search/migrations/0001_initial.py	(date 1614373776000)
@@ -0,0 +1,23 @@
+# Generated by Django 3.1.7 on 2021-02-26 17:03
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='TwitterData',
+            fields=[
+                ('id', models.PositiveIntegerField(max_length=30, primary_key=True, serialize=False, unique=True)),
+                ('text', models.CharField(max_length=4000)),
+                ('user', models.CharField(max_length=100)),
+                ('lang', models.CharField(max_length=10)),
+            ],
+        ),
+    ]
Index: search/migrations/0002_auto_20210226_2303.py
===================================================================
--- search/migrations/0002_auto_20210226_2303.py	(date 1614373776000)
+++ search/migrations/0002_auto_20210226_2303.py	(date 1614373776000)
@@ -0,0 +1,38 @@
+# Generated by Django 3.1.7 on 2021-02-26 17:33
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('search', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='twitterdata',
+            name='created_at',
+            field=models.DateTimeField(auto_now=True),
+        ),
+        migrations.AddField(
+            model_name='twitterdata',
+            name='favorite_count',
+            field=models.CharField(default=0, max_length=10),
+        ),
+        migrations.AddField(
+            model_name='twitterdata',
+            name='retweet_count',
+            field=models.CharField(default=0, max_length=10),
+        ),
+        migrations.AddField(
+            model_name='twitterdata',
+            name='url',
+            field=models.URLField(default='www.google.com'),
+        ),
+        migrations.AlterField(
+            model_name='twitterdata',
+            name='id',
+            field=models.PositiveIntegerField(primary_key=True, serialize=False, unique=True),
+        ),
+    ]
Index: search/migrations/0003_auto_20210226_2327.py
===================================================================
--- search/migrations/0003_auto_20210226_2327.py	(date 1614373776000)
+++ search/migrations/0003_auto_20210226_2327.py	(date 1614373776000)
@@ -0,0 +1,18 @@
+# Generated by Django 3.1.7 on 2021-02-26 17:57
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('search', '0002_auto_20210226_2303'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='twitterdata',
+            name='url',
+            field=models.URLField(blank=True),
+        ),
+    ]
Index: search/migrations/0004_auto_20210226_2329.py
===================================================================
--- search/migrations/0004_auto_20210226_2329.py	(date 1614373776000)
+++ search/migrations/0004_auto_20210226_2329.py	(date 1614373776000)
@@ -0,0 +1,18 @@
+# Generated by Django 3.1.7 on 2021-02-26 17:59
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('search', '0003_auto_20210226_2327'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='twitterdata',
+            name='url',
+            field=models.URLField(default=None),
+        ),
+    ]
Index: search/migrations/0005_auto_20210226_2331.py
===================================================================
--- search/migrations/0005_auto_20210226_2331.py	(date 1614373776000)
+++ search/migrations/0005_auto_20210226_2331.py	(date 1614373776000)
@@ -0,0 +1,18 @@
+# Generated by Django 3.1.7 on 2021-02-26 18:01
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('search', '0004_auto_20210226_2329'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='twitterdata',
+            name='url',
+            field=models.CharField(blank=True, max_length=200, null=True),
+        ),
+    ]
Index: search/migrations/__init__.py
===================================================================
--- search/migrations/__init__.py	(date 1614373776000)
+++ search/migrations/__init__.py	(date 1614373776000)
@@ -0,0 +1,0 @@
Index: search/models.py
===================================================================
--- search/models.py	(date 1614373776000)
+++ search/models.py	(date 1614373776000)
@@ -0,0 +1,19 @@
+# Author : Dada Nanjesha GS (dadananjesha@rymec.com)
+# Year : 2021
+# Copyright: Dada Nanjesha GS
+
+from django.db import models
+
+
+class TwitterData(models.Model):
+    id = models.PositiveIntegerField(primary_key=True, blank=False, unique=True)
+    text = models.CharField(max_length=4000, blank=False)
+    user = models.CharField(max_length=100, blank=False)
+    lang = models.CharField(max_length=10, blank=False)
+    url = models.CharField(max_length=200, null=True, blank=True)
+    created_at = models.DateTimeField(null=False)
+    retweet_count = models.CharField(max_length=10, default=0)
+    favorite_count = models.CharField(max_length=10, default=0)
+
+    def __str__(self):
+        return f"{self.id}, {self.user}"
Index: search/serializers.py
===================================================================
--- search/serializers.py	(date 1614373776000)
+++ search/serializers.py	(date 1614373776000)
@@ -0,0 +1,12 @@
+# Author : Dada Nanjesha GS (dadananjesha@rymec.com)
+# Year : 2021
+# Copyright: Dada Nanjesha GS
+
+from rest_framework import serializers
+from .models import TwitterData
+
+
+class TwitterSearchSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = TwitterData
+        fields = ['id', 'text', 'user', 'lang', 'url', 'created_at', 'retweet_count', 'favorite_count']
Index: search/tests.py
===================================================================
--- search/tests.py	(date 1614373776000)
+++ search/tests.py	(date 1614373776000)
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
Index: search/views.py
===================================================================
--- search/views.py	(date 1614373776000)
+++ search/views.py	(date 1614373776000)
@@ -0,0 +1,133 @@
+# Author : Dada Nanjesha GS (dadananjesha@rymec.com)
+# Year : 2021
+# Copyright: Dada Nanjesha GS
+
+"""
+This file contains all the Django REST Framework APIs for search_tweet and TwitterSearchList
+
+This script requires that `twitter` ,`json`, `rest_framework`, `HttpResponse`, `django`, `datetime` be
+installed within the Python environment you are running this script in.
+"""
+
+import datetime as dt
+import json
+
+from django.http import HttpResponse
+from rest_framework import status, generics
+from rest_framework.decorators import api_view
+from rest_framework.pagination import PageNumberPagination
+from twitter import Twitter, OAuth
+
+from .models import TwitterData
+from .serializers import TwitterSearchSerializer
+
+date_format = '%a %b %d %H:%M:%S %z %Y'
+application_type = 'application/json'
+
+
+@api_view(['GET'])
+def search_tweet(request):
+    """
+    API 1 to trigger a twitter search for recent high traffic events. (e.g. #ElectionDay,
+    #Elections2020, #TRUMP2020Landslide, #BidenHarris2020 etc were high traffic
+    hashtags during the US Presidential elections 2020).
+        a. Trigger search for keyword sent in request
+        b. You can use libraries for twitter search
+        c. Fetch tweets from twitter and store a normalized and curated version of the tweet
+        data.
+        d. Architect appropriate database and schema keeping redundancy and query
+        simplicity in mind.
+
+    EXAMPLE : http://127.0.0.1:8000/search/?query=TRUMP2020Landslide
+
+    :param request: API request
+    :type request: query
+    :return: msg
+    :rtype: HttpResponse
+    :exception: KeyError, ValueError, TypeError, Exception
+    """
+    result = {}
+    load = []
+    try:
+        query = request.GET.get('query')
+        data = search_data(query)
+    except (KeyError, ValueError, TypeError) as e:
+        response_obj = {'status': 'failed', 'reason': str(e)}
+        return HttpResponse(json.dumps(response_obj), content_type=application_type,
+                            status=status.HTTP_400_BAD_REQUEST)
+    try:
+        data_dict = data['statuses']
+        for data in data_dict:
+            records = TwitterData()
+            records.id = data['id']
+            records.text = data['text']
+            records.user = data['user']['name']
+            records.url = data['user']['url']
+            records.lang = data['lang']
+            date_time = data['created_at']
+            date_field = dt.datetime.strptime(str(date_time), date_format)
+            records.created_at = date_field
+            records.retweet_count = data['retweet_count']
+            records.favorite_count = data['favorite_count']
+            if TwitterData.objects.filter(id=data['id']).count() == 0:
+                load.append(records)
+        TwitterData.objects.bulk_create(load)
+        result = {'msg': 'Data loaded successfully'}
+        return HttpResponse(json.dumps(result), content_type=application_type, status=status.HTTP_200_OK)
+    except Exception as e:
+        response_obj = {'status': 'failed', 'reason': str(e)}
+        return HttpResponse(json.dumps(response_obj), content_type=application_type,
+                            status=status.HTTP_404_NOT_FOUND)
+
+
+def search_data(query):
+    """
+    Data returned with dict values
+    :param request: query
+    :return: data
+    :rtype: dict
+    """
+    t = Twitter(
+        auth=OAuth('1365015472345804805-zhFdcYeHZEjxUGqCVNRWRD3OkQR1uW',
+                   'KrJqM2dxoyEZDL4p3YIkCGV6mciWp3avVv70LvAiA4poC',
+                   '0BO3kvySE1HZYtcAEHhQP3Hnk', '7SuvnCx4ofW0mg7QDW1C50tUzZeZDX2dJRN4xdTCY2iLBz62CA'))
+    data = t.search.tweets(q=query)
+    u_data = json.dumps(data)
+    data = json.loads(u_data)
+    return data
+
+
+class TwitterSearchListPagination(PageNumberPagination):
+    """
+    TwitterSearchListPagination Class is used to get the Pagination for API
+
+    """
+    page_size = 2
+    page_size_query_param = 'page_size'
+    max_page_size = 100
+
+
+class TwitterSearchList(generics.ListAPIView):
+    """
+    API 2 to return stored tweets and their metadata based on applied filters/search.
+        a. API should be paginated
+        b. It must support text search in tweet text/user name
+        c. It must have sorting available by date time, tweet text, etc
+        d. API should have filters like user/screen name, retweet count, favorite count, data
+        range, language, user follower counts, user mentions, URLs, etc (the more, the
+        merrier) in such a way that:
+        i. Data range filter in case of date (e.g. tweet date, etc.)
+        ii. Less than, greater than, equal to filter in case of integer column (e.g.
+        retweet count)
+        iii. Start with, ends with, contains, exact match in case of string (e.g. tweet
+        text, user name, screen name, URLs, user mentions, etc.)
+
+    EXAMPLE : http://127.0.0.1:8000/twitterSearch/
+
+
+    :param request: ListAPIView
+    :rtype: Response
+    """
+    queryset = TwitterData.objects.all()
+    serializer_class = TwitterSearchSerializer
+    pagination_class = TwitterSearchListPagination
